{"version":3,"sources":["Countries.js","AutoCompletedText.js","App.js","serviceWorker.js","index.js"],"names":["Countries","split","AutoCompletedText","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTextChange","e","value","target","suggestions","length","regex","RegExp","concat","countries","sort","filter","v","test","setState","text","renderSuggestions","state","react_default","a","createElement","map","item","index","key","onClick","selectedText","_this$state","id","placeholder","type","onChange","React","Component","App","className","AutoCompletedText_AutoCompletedText","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAAeA,EAAA,0/DAoMLC,MAAM,MC/LKC,qBAEjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,aAAe,SAACC,GACZ,IAAMC,EAAQD,EAAEE,OAAOD,MACnBE,EAAc,GAClB,GAAGF,EAAMG,OAAS,EAAE,CAChB,IAAMC,EAAQ,IAAIC,OAAJ,IAAAC,OAAeN,GAAS,KACtCE,EAAcK,EAAUC,OAAOC,OAAO,SAAAC,GAAC,OAAIN,EAAMO,KAAKD,KAE1DnB,EAAKqB,SAAS,iBAAM,CAChBV,cACAW,KAAKb,MAjBKT,EA6BlBuB,kBAAoB,WAAM,IAChBZ,EAAgBX,EAAKwB,MAArBb,YACN,OAA0B,IAAvBA,EAAYC,OACJ,KAGPa,EAAAC,EAAAC,cAAA,UAEQhB,EAAYiB,IAAI,SAACC,EAAMC,GAAP,OAAkBL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,EAAOE,QAAS,kBAAMhC,EAAKiC,aAAaJ,KAAQA,OAnCvG7B,EAAKwB,MAAM,CACPb,YAAY,GACZW,KAAM,IAJItB,4EAqBLS,GACTN,KAAKkB,SAAS,iBAAM,CAChBC,KAAKb,EACLE,YAAY,uCAmBhB,IAAAuB,EAC0B/B,KAAKqB,MAA3BF,EADJY,EACIZ,KAAMX,EADVuB,EACUvB,YACV,OACIc,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,aACJV,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,SAAOS,YAAY,wBAAwBD,GAAG,QAAQE,KAAK,OAAOC,SAAUnC,KAAKI,aAAcE,MAAOa,IACrGnB,KAAKoB,oBACNE,EAAAC,EAAAC,cAAA,4BAAoBhB,EAAYC,gBApDD2B,IAAMC,YCYtCC,mLATX,OACEhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAACgB,EAAD,cAJUH,aCIEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0a947203.chunk.js","sourcesContent":["export default `\r\nAfghanistan\r\nAlbania\r\nAlgeria\r\nAndorra\r\nAngola\r\nAntigua & Deps\r\nArgentina\r\nArmenia\r\nAustralia\r\nAustria\r\nAzerbaijan\r\nBahamas\r\nBahrain\r\nBangladesh\r\nBarbados\r\nBelarus\r\nBelgium\r\nBelize\r\nBenin\r\nBhutan\r\nBolivia\r\nBosnia Herzegovina\r\nBotswana\r\nBrazil\r\nBrunei\r\nBulgaria\r\nBurkina\r\nBurundi\r\nCambodia\r\nCameroon\r\nCanada\r\nCape Verde\r\nCentral African Rep\r\nChad\r\nChile\r\nChina\r\nColombia\r\nComoros\r\nCongo\r\nCongo {Democratic Rep}\r\nCosta Rica\r\nCroatia\r\nCuba\r\nCyprus\r\nCzech Republic\r\nDenmark\r\nDjibouti\r\nDominica\r\nDominican Republic\r\nEast Timor\r\nEcuador\r\nEgypt\r\nEl Salvador\r\nEquatorial Guinea\r\nEritrea\r\nEstonia\r\nEthiopia\r\nFiji\r\nFinland\r\nFrance\r\nGabon\r\nGambia\r\nGeorgia\r\nGermany\r\nGhana\r\nGreece\r\nGrenada\r\nGuatemala\r\nGuinea\r\nGuinea-Bissau\r\nGuyana\r\nHaiti\r\nHonduras\r\nHungary\r\nIceland\r\nIndia\r\nIndonesia\r\nIran\r\nIraq\r\nIreland {Republic}\r\nIsrael\r\nItaly\r\nIvory Coast\r\nJamaica\r\nJapan\r\nJordan\r\nKazakhstan\r\nKenya\r\nKiribati\r\nKorea North\r\nKorea South\r\nKosovo\r\nKuwait\r\nKyrgyzstan\r\nLaos\r\nLatvia\r\nLebanon\r\nLesotho\r\nLiberia\r\nLibya\r\nLiechtenstein\r\nLithuania\r\nLuxembourg\r\nMacedonia\r\nMadagascar\r\nMalawi\r\nMalaysia\r\nMaldives\r\nMali\r\nMalta\r\nMarshall Islands\r\nMauritania\r\nMauritius\r\nMexico\r\nMicronesia\r\nMoldova\r\nMonaco\r\nMongolia\r\nMontenegro\r\nMorocco\r\nMozambique\r\nMyanmar, {Burma}\r\nNamibia\r\nNauru\r\nNepal\r\nNetherlands\r\nNew Zealand\r\nNicaragua\r\nNiger\r\nNigeria\r\nNorway\r\nOman\r\nPakistan\r\nPalau\r\nPanama\r\nPapua New Guinea\r\nParaguay\r\nPeru\r\nPhilippines\r\nPoland\r\nPortugal\r\nQatar\r\nRomania\r\nRussian Federation\r\nRwanda\r\nSt Kitts & Nevis\r\nSt Lucia\r\nSaint Vincent & the Grenadines\r\nSamoa\r\nSan Marino\r\nSao Tome & Principe\r\nSaudi Arabia\r\nSenegal\r\nSerbia\r\nSeychelles\r\nSierra Leone\r\nSingapore\r\nSlovakia\r\nSlovenia\r\nSolomon Islands\r\nSomalia\r\nSouth Africa\r\nSouth Sudan\r\nSpain\r\nSri Lanka\r\nSudan\r\nSuriname\r\nSwaziland\r\nSweden\r\nSwitzerland\r\nSyria\r\nTaiwan\r\nTajikistan\r\nTanzania\r\nThailand\r\nTogo\r\nTonga\r\nTrinidad & Tobago\r\nTunisia\r\nTurkey\r\nTurkmenistan\r\nTuvalu\r\nUganda\r\nUkraine\r\nUnited Arab Emirates\r\nUnited Kingdom\r\nUnited States\r\nUruguay\r\nUzbekistan\r\nVanuatu\r\nVatican City\r\nVenezuela\r\nVietnam\r\nYemen\r\nZambia\r\nZimbabwe`.split('\\n')","import React from \"react\";\r\nimport countries from './Countries';\r\nimport './App.css';\r\n\r\n\r\nexport default class AutoCompletedText extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            suggestions:[],\r\n            text: ''\r\n        }\r\n    }\r\n\r\n    onTextChange = (e) =>{\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        if(value.length > 0){\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = countries.sort().filter(v => regex.test(v))   \r\n        }\r\n        this.setState(() =>({\r\n            suggestions,\r\n            text:value\r\n\r\n        }))\r\n    }\r\n    selectedText(value){\r\n        this.setState(() =>({\r\n            text:value,\r\n            suggestions:[],\r\n\r\n        }))\r\n\r\n    }\r\n    renderSuggestions = () => {\r\n        let { suggestions } = this.state;\r\n        if(suggestions.length === 0){\r\n            return null;\r\n        }\r\n        return (\r\n            <ul >\r\n                {\r\n                    suggestions.map((item, index) => (<li key={index} onClick={() => this.selectedText(item)}>{item}</li>))\r\n                }\r\n            </ul>\r\n        );\r\n    }\r\n    \r\nrender(){\r\n    const { text, suggestions } = this.state;\r\n        return(\r\n            <div id=\"notebooks\">\r\n                <h2>Auto Completed/Suggestions</h2>\r\n                <input placeholder=\"Type any country name\" id=\"query\" type=\"text\" onChange={this.onTextChange} value={text}/>\r\n                {this.renderSuggestions()}\r\n                <span>Suggestions: {suggestions.length}</span>\r\n            </div>\r\n    );\r\n}\r\n}","import React ,{Component} from 'react';\r\n\r\nimport AutoCompletedText from './AutoCompletedText';\r\n\r\n\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return (\r\n      <div className='App'>\r\n        <AutoCompletedText />\r\n\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}